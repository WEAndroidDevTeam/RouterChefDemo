package com.example.routerchefdemo.routerModels

class HuaweiRouterModel : RouterModel() {

    override var routerModel: String = "Huawei DG8045"
    override var loginPath: String = "https://192.168.1.1/"
    override var systemInfoPath: String = "https://192.168.1.1/html/advance.html#device_info"
    override var dslInfoPath: String = "https://192.168.1.1/html/advance.html#internet"
    override var wlanSettingsPath: String = "https://192.168.1.1/html/advance.html#wlan"
    override var connectedDevicesPath: String = "https://192.168.1.1/html/advance.html#wlan"
    override var rebootPath: String = "https://192.168.1.1/html/advance.html#device_mngt"

    override fun login(username: String, password: String): String {
        return "let username = '$username' ;" +
                "\nlet password = '$password' ;" +
                "\n\nlet exit = setTimeout(() => {\n    clearInterval(temp);\n    clearTimeout(exit);\n    Android.callbackHandle(JSON.stringify({result:\"timeout\"}));    \n}, 25000);\nlet temp = setInterval(() => {\n        if (document.getElementById('login_window')) {\n            let errMsg = document.getElementById('errorCategory').innerText;\n            if (errMsg.includes(\"minute\")) {\n                clearInterval(temp);\n                clearTimeout(exit);\n            Android.callbackHandle(JSON.stringify({ result: \"retry_after\", time: 60 }));\n            }\n            else if(errMsg.includes(\"You are already logged in.\")){\n                clearInterval(temp);\n                clearTimeout(exit);\n                Android.callbackHandle(JSON.stringify({result:\"already_login\"}));\n            }\n             else {\n\n                if (document.getElementById(\"setfirstbutton\")) {\n                    Android.callbackHandle(JSON.stringify({result:\"enforce_login\"}));\n                    document.getElementById(\"setfirstbutton\").click();\n                } else {\n                    if (errMsg.includes(\"Incorrect\")) {\n                        Android.callbackHandle(JSON.stringify({result:\"invalid_login\"}));\n                    }\n                    if (document.getElementById('index_username')) {\n                        Android.callbackHandle(JSON.stringify({result:\"logging_in\"}));\n                        document.getElementById('index_username').value = username;\n                        document.getElementById('password').value = password;\n                        document.getElementById(\"loginbtn\").click();\n                    }\n                }\n            }\n        } else if (document.getElementById('wizard_wifi_title')) {\n            clearInterval(temp);\n            clearTimeout(exit);\n            Android.callbackHandle(JSON.stringify({result:\"login_success\"}));\n        }\n}, 1000);"
    }

    override fun getSystemInfo(): String {
        return "function secondsToHms(d) {\n    d = Number(d);\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n\n    var hDisplay = h > 0 ? h + (h == 1 ? \" hour, \" : \" hours, \") : \"\";\n    var mDisplay = m > 0 ? m + (m == 1 ? \" minute\" : \" minutes\") : \"\";\n    return hDisplay + mDisplay;\n}\n\nlet exit = setTimeout(() => {\n    clearInterval(temp);\n    clearTimeout(exit);\n    Android.callbackHandle(JSON.stringify({ result: \"timeout\" }));\n}, 10000);\n\nlet temp = setInterval(() => {\n    try {\n        if (document.getElementById('login_window')) {\n            clearInterval(temp);\n            clearTimeout(exit);\n            Android.callbackHandle(JSON.stringify({ result: \"need_login\" }));\n        } else {\n            Android.callbackHandle(JSON.stringify({ result: \"showing_info\" }));\n            Atp.DslInfoController.load();\n            if (Atp.DslInfoController.content.Status) {\n                let dslInfo = Atp.DslInfoController.content;\n                let upload = (dslInfo.UpCurrRate / 1024).toFixed(1);\n                let download = (dslInfo.DownCurrRate / 1024).toFixed(1);\n                let maxUpload = (dslInfo.UpstreamMaxBitRate / 1024).toFixed(1);\n                let maxDownload = (dslInfo.DownstreamMaxBitRate / 1024).toFixed(1);\n\n                if (!dslInfo.Modulation) {\n                    Android.callbackHandle(JSON.stringify({ result: \"null_dsl_info\" }));\n                    clearInterval(temp);\n                    clearTimeout(exit);\n                } else {\n\n                    let info = {\n                        result: \"dsl_info\",\n                        modType: dslInfo.Modulation,\n                        upload: upload,\n                        download: download,\n                        lineRate: upload + \"/\" + download + \" Mbps\",\n                        maxUpload: maxUpload,\n                        maxDownload: maxDownload,\n                        maxRate: maxUpload + \"/\" + maxDownload +\" Mbps\",\n                        noise: dslInfo.UpMargin + \"/\" + dslInfo.DownMargin,\n                        chanType: dslInfo.DataPath,\n                        depth: dslInfo.UpDepth + \"/\" + dslInfo.DownDepth,\n                        delay: dslInfo.InterleaveDelayUs + \"/\" + dslInfo.InterleaveDelayDs +\" ms\",\n                        crc: null,\n                        fec: null,\n                        upTime: secondsToHms(dslInfo.ShowtimeStart)\n                    }\n\n                    clearInterval(temp);\n                    clearTimeout(exit);\n                    Android.callbackHandle(JSON.stringify(info));\n                }\n            }\n        }\n    } catch (err){ }\n}, 500);"
    }

    override fun getDslInfo(): String {
        return "function secondsToHms(d) {\n    d = Number(d);\n    var h = Math.floor(d / 3600);\n    var m = Math.floor(d % 3600 / 60);\n\n    var hDisplay = h > 0 ? h + (h == 1 ? \" hour, \" : \" hours, \") : \"\";\n    var mDisplay = m > 0 ? m + (m == 1 ? \" minute\" : \" minutes\") : \"\";\n    return hDisplay + mDisplay;\n}\n\nlet exit = setTimeout(() => {\n    clearInterval(temp);\n    clearTimeout(exit);\n    Android.callbackHandle(JSON.stringify({ result: \"timeout\" }));\n}, 10000);\n\nlet temp = setInterval(() => {\n    try {\n        if (document.getElementById('login_window')) {\n            clearInterval(temp);\n            clearTimeout(exit);\n            Android.callbackHandle(JSON.stringify({ result: \"need_login\" }));\n        } else {\n            Android.callbackHandle(JSON.stringify({ result: \"showing_info\" }));\n            Atp.DslInfoController.load();\n            if (Atp.DslInfoController.content.Status) {\n                let dslInfo = Atp.DslInfoController.content;\n                let upload = (dslInfo.UpCurrRate / 1024).toFixed(1);\n                let download = (dslInfo.DownCurrRate / 1024).toFixed(1);\n                let maxUpload = (dslInfo.UpstreamMaxBitRate / 1024).toFixed(1);\n                let maxDownload = (dslInfo.DownstreamMaxBitRate / 1024).toFixed(1);\n\n                if (!dslInfo.Modulation) {\n                    Android.callbackHandle(JSON.stringify({ result: \"null_dsl_info\" }));\n                    clearInterval(temp);\n                    clearTimeout(exit);\n                } else {\n\n                    let info = {\n                        result: \"dsl_info\",\n                        modType: dslInfo.Modulation,\n                        upload: upload,\n                        download: download,\n                        lineRate: upload + \"/\" + download + \" Mbps\",\n                        maxUpload: maxUpload,\n                        maxDownload: maxDownload,\n                        maxRate: maxUpload + \"/\" + maxDownload +\" Mbps\",\n                        noise: dslInfo.UpMargin + \"/\" + dslInfo.DownMargin,\n                        chanType: dslInfo.DataPath,\n                        depth: dslInfo.UpDepth + \"/\" + dslInfo.DownDepth,\n                        delay: dslInfo.InterleaveDelayUs + \"/\" + dslInfo.InterleaveDelayDs +\" ms\",\n                        crc: null,\n                        fec: null,\n                        upTime: secondsToHms(dslInfo.ShowtimeStart)\n                    }\n\n                    clearInterval(temp);\n                    clearTimeout(exit);\n                    Android.callbackHandle(JSON.stringify(info));\n                }\n            }\n        }\n    } catch (err){ }\n}, 500);"
    }

    override fun changeSSID(
        ssidName: String?,
        password: String?,
        isEnabled: Boolean?,
        maxClients: String?,
        isHidden: Boolean,
        isOpen: Boolean
    ): String {
        val sb = StringBuilder()
        sb.append("let ssid = \"")
        sb.append(ssidName)
        sb.append("\";\nlet hidden = ")
        sb.append(isHidden)
        sb.append(";\nlet password = \"")
        sb.append(password)
        sb.append("\";\nlet open = ")
        sb.append(isOpen)
        sb.append(";\nlet maxClients = \"")
        sb.append(maxClients)
        sb.append("\";\n\nlet applied = false;\n\nlet exit = setTimeout(() => {\n    clearInterval(temp);\n    clearTimeout(exit);\n    Android.callbackHandle(JSON.stringify({ result: \"timeout\" }));\n}, 10000);\n\nlet temp = setInterval(() => {\n    try {\n        if (document.getElementById('login_window')) {\n            clearInterval(temp);\n            clearTimeout(exit);\n            Android.callbackHandle(JSON.stringify({ result: \"need_login\" }));\n        } else {\n            Android.callbackHandle(JSON.stringify({ result: \"applying_settings\" }));\n\n            if (!document.getElementById(\"wlan_wifi_mi_ssid2_4GHz1_ctrl\")) {\n                (new Array(...document.getElementsByClassName(\"pull-left third_menu_font paddingtop_5 marginleft_3\"))).filter(item => item.innerText.includes(\"WLAN\"))[0].click()\n            } else if (document.getElementById(\"wlan_enc_view_data_submitstatusview_failview\")) {\n                clearInterval(temp);\n                clearTimeout(exit);\n                Android.callbackHandle(JSON.stringify({ result: \"complex_wlan_password_needed\" }));\n            }\n            else if (applied) {\n                clearInterval(temp);\n                clearTimeout(exit);\n                Android.callbackHandle(JSON.stringify({ result: \"executed\" }));\n            }\n            else {\n                Atp.WlanSendSettingsController.content[0].WifiSsid = ssid;\n                Atp.WlanSendSettingsController.content[0].X_AssociateDeviceNum = maxClients\n                Atp.WlanSendSettingsController.content[0].WifiHideBroadcast = hidden;\n\n                if (!open) {\n                    Atp.WlanSendSettingsController.content[0].BeaconType = \"WPAand11i\"\n                    password && (Atp.WlanSendSettingsController.content[0].WpaPreSharedKey = password);\n                } else {\n                    Atp.WlanSendSettingsController.content[0].BeaconType = \"None\";\n                }\n                if (document.getElementById(\"AllSsidSettings_submitbutton\")) {\n                    document.getElementById(\"AllSsidSettings_submitbutton\").click();\n                    applied=true;    \n                }\n            }\n        }\n    } catch (err){ }\n}, 1000);")
        return sb.toString()
    }

    override fun getConnectedDevices(): String {
        return "let exit = setTimeout(() => {\n    clearInterval(temp);\n    clearTimeout(exit);\n    Android.callbackHandle(JSON.stringify({ result: \"timeout\" }));\n}, 10000);\n\nlet temp = setInterval(() => {\n    try {\n        if (document.getElementById('login_window')) {\n            clearInterval(temp);\n            clearTimeout(exit);\n            Android.callbackHandle(JSON.stringify({ result: \"need_login\" }));\n        } else {\n            Android.callbackHandle(JSON.stringify({ result: \"showing_info\" }));\n            let content = Atp.AllHostsController.content;\n            if (content.length) {\n                let devices = content\n                    .filter((item) => item.Rssi && item.WlanActive)\n                    .map(device => {\n                        return {\n                            ip: device.IPAddress,\n                            mac: device.MACAddress,\n                            hostname: device.HostName\n                        }\n                    });\n                if (devices.length) {\n                    info = {\n                        result: \"connected_devices_info\",\n                        devices: devices\n                    }\n                    Android.callbackHandle(JSON.stringify(info));\n                } else {\n                    Android.callbackHandle(JSON.stringify({ result: \"no_devices_found\" }));\n                }\n                clearInterval(temp);\n                clearTimeout(exit);\n            }\n        }\n    } catch (err){ }\n}, 1000);"
    }

    override fun reboot(): String {
        return "let exit = setTimeout(() => {\n    clearInterval(temp);\n    clearTimeout(exit);\n    Android.callbackHandle(JSON.stringify({ result: \"timeout\" }));\n}, 10000);\n\nlet temp = setInterval(() => {\n    try {\n        if (document.getElementById('login_window')) {\n            clearInterval(temp);\n            clearTimeout(exit);\n            Android.callbackHandle(JSON.stringify({ result: \"need_login\" }));\n        } else {\n            Android.callbackHandle(JSON.stringify({ result: \"applying_settings\" }));\n            Atp.RebootController.click_proc();\n            clearInterval(temp);\n            clearTimeout(exit);\n            Android.callbackHandle(JSON.stringify({ result: \"executed\" }));\n        }\n    } catch (err){ }\n}, 500);"
    }

}
